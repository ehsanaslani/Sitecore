// -------------------------------------------------------------------------- //
//       Sitecore Install Framework - Sitecore XM1-CM Configuration           //
//                                                                            //
//  Run this configuration to install a single instance of Sitecore.          //
//  This instance is configured for Content Management.                       //
//  This instance is configured to use Solr.                                  //
//                                                                            //
//  NOTE: Only single line comments are accepted in configurations.           //
// -------------------------------------------------------------------------- //
{
    "Parameters": {
        // Parameters are values that may be passed when Install-SitecoreConfiguration is called.
        // Parameters must declare a Type and may declare a DefaultValue and Description.
        // Parameters with no DefaultValue are required when Install-SitecoreConfiguration is called.
        "Package": {
            "Type": "string",
            "Description": "The path to the Web Deploy package to deploy."
        },
        "Package_Bootload": {
            "Type": "string",
            "Description": "The path to the Bootload Web Deploy package to deploy."
        },
        "Package_Powershell": {
            "Type": "string",
            "Description": "The path to the Powershell Web Deploy package to deploy."
        },
        "Package_SXA": {
            "Type": "string",
            "Description": "The path to the SXA Web Deploy package to deploy."
        },
        "CargoPayloadsDirectory": {
            "Type": "string",
            "Description": "The Sitecore Azure Toolkit Cargo Payloads files directory for the current Sitecore version."
        },
        "InstallDirectory": {
            "Type": "string",
            "Description": "The install directory for the site."
        },
        "IoXmlDirectory": {
            "Type": "string",
            "Description": "The install directory which contains .ioxml installation scripts."
        },
        "LicenseFile": {
            "Type": "string",
            "Description": "The path to the Sitecore license file."
        },
        "SqlDbPrefix": {
            "Type": "string",
            "Description": "The prefix used for all Sql databases."
        },
        "SSLCert": {
            "Type": "string",
            "Description": "The certificate to use for HTTPS web bindings. Provide the name or the thumbprint. If not provided a certificate will be generated.",
            "DefaultValue": ""
        },
        "SiteName": {
            "Type": "string",
            "Description": "The name of the site to be deployed."
        },
        "SitecoreAdminPassword": {
            "Type": "string",
            "DefaultValue": "b",
            "Description": "The admin password for the Sitecore instance."
        },
        "SqlCoreUser": {
            "Type": "string",
            "DefaultValue": "coreuser",
            "Description": "The user to create and use in Core connection string."
        },
        "SqlCorePassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Core connection string in Sitecore."
        },
        "SqlMasterUser": {
            "Type": "string",
            "DefaultValue": "masteruser",
            "Description": "The user to create and use in Master connection string."
        },
        "SqlMasterPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Master connection string in Sitecore."
        },
        "SqlWebUser": {
            "Type": "string",
            "DefaultValue": "webuser",
            "Description": "The user to create and use in Web connection string."
        },
        "SqlWebPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Web connection string in Sitecore."
        },
        "SqlReportingUser": {
            "Type": "string",
            "DefaultValue": "reportinguser",
            "Description": "The user to create and use in Experience Forms connection string."
        },
        "SqlReportingPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Experience Forms connection string in Sitecore."
        },
        "CloudSearchConnectionString": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Experience Forms connection string in Sitecore."
        },
        "ApplicationInsightsKey": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Experience Forms connection string in Sitecore."
        },
        "ApplicationInsightsRole": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Experience Forms connection string in Sitecore."
        },
        "SqlFormsUser": {
            "Type": "string",
            "DefaultValue": "formsuser",
            "Description": "The user to create and use in Experience Forms connection string."
        },
        "SqlFormsPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Experience Forms connection string in Sitecore."
        },
        "SqlServer": {
            "Type": "string",
            "Description": "The Sql Server where databases will be installed."
        },
        "SolrCorePrefix": {
            "Type": "string",
            "DefaultValue": "https://localhost:8983/solr",
            "Description": "The Solr instance to use."
        },
        "SolrUrl": {
            "Type": "string",
            "DefaultValue": "https://localhost:8983/solr",
            "Description": "The Solr instance to use."
        },
        "TelerikEncryptionKey": {
            "Type": "string",
            "DefaultValue": "PutYourCustomEncryptionKeyHereFrom32To256CharactersLong",
            "Description": "The key to be used by Telerik controls to encrypt interaction with Content Editors. It's a random string between 32 and 256 symbols long."
        }
    },

    "Modules" : [
        ".\\Modules\\WSF-SIF-Extensions.psm1"
    ],

    "Variables": {
        // Variables are values calculated in a configuration.
        // They can reference Parameters, other Variables, and config functions.
        // Database names.
        "Sql.Database.Core": "[concat(parameter('SqlServer'), concat(parameter('SqlDbPrefix'), '-core'))]",
        "Sql.Database.Master": "[concat(parameter('SqlServer'), concat(parameter('SqlDbPrefix'), '-master'))]",
        "Sql.Database.Web": "[concat(parameter('SqlServer'), concat(parameter('SqlDbPrefix'), '-web'))]",
        "Sql.Database.Reporting": "[concat(parameter('SqlServer'), concat(parameter('SqlDbPrefix'), '-reporting'))]",
        "Sql.Database.Forms": "[concat(parameter('SqlServer'), concat(parameter('SqlDbPrefix'), '-experienceforms'))]",
        // MongoDB
        "Mongo.Analytics": "mongodb://localhost/Sitecore_analytics",
        "Mongo.Tracking.Live": "mongodb://localhost/Sitecore_tracking_live",
        "Mongo.Tracking.History": "mongodb://localhost/Sitecore_tracking_history",
        "Mongo.Tracking.Contact": "mongodb://localhost/Sitecore_tracking_contact",
        // Solr core names.
        "Solr.Core.Name": "[concat(parameter('SolrCorePrefix'), '_core_index')]",
        "Solr.Master.Name": "[concat(parameter('SolrCorePrefix'), '_master_index')]",
        "Solr.Web.Name": "[concat(parameter('SolrCorePrefix'), '_web_index')]",
        "Solr.MD.Master.Name": "[concat(parameter('SolrCorePrefix'), '_marketingdefinitions_master')]",
        "Solr.MD.Web.Name": "[concat(parameter('SolrCorePrefix'), '_marketingdefinitions_web')]",
        "Solr.MA.Master.Name": "[concat(parameter('SolrCorePrefix'), '_marketing_asset_index_master')]",
        "Solr.MA.Web.Name": "[concat(parameter('SolrCorePrefix'), '_marketing_asset_index_web')]",
        "Solr.Testing.Name": "[concat(parameter('SolrCorePrefix'), '_testing_index')]",
        "Solr.Suggested.Name": "[concat(parameter('SolrCorePrefix'), '_suggested_test_index')]",
        "Solr.FXM.Master.Name": "[concat(parameter('SolrCorePrefix'), '_fxm_master_index')]",
        "Solr.FXM.Web.Name": "[concat(parameter('SolrCorePrefix'), '_fxm_web_index')]",
        // The security certificate details
        "Security.CertificateStore": "Cert:\\Localmachine\\My",
        "Security.SSL.CertificateThumbprint": "[GetCertificateThumbprint(parameter('SSLCert'), variable('Security.CertificateStore'))]",
        // The sites full path on disk
        "Site.PhysicalPath": "[joinpath(parameter('InstallDirectory'), 'Website')]",
        // The sites data folder
        "Site.DataFolder": "[joinpath(variable('Site.PhysicalPath'), 'App_Data')]",
        "Site.MediaCacheFolder": "$(dataFolder)/MediaCache",
        "Bootload.TransformsFolder": "[joinpath(variable('Site.DataFolder'), 'Transforms')]"
    },
    "Tasks": {
        // Tasks are separate units of work in a configuration.
        // Each task is an action that will be completed when Install-SitecoreConfiguration is called.
        // By default, tasks are applied in the order they are declared.
        // Tasks may reference Parameters, Variables, and config functions.
        "CreatePaths": {
            // Ensure the destination path for the site exists.
            "Type": "EnsurePath",
            "Params": {
                "Exists": ["[variable('Site.PhysicalPath')]"]
            }
        },
        "CreateAppPool": {
            // Creates or updates the app pool.
            "Type": "AppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Properties": {
                    "ProcessModel": {
                        "identityType": "ApplicationPoolIdentity"
                    }
                }
            }
        },
        "AddAppPoolUserToGroup": {
            // Adds apppool user to Performance Log Users group.
            "Type": "AddUserToLocalGroup",
            "Params": {
			    "SiteName": "[parameter('SiteName')]",
                "GroupName": "Performance Log Users"                    
            }
        },
        "CreateWebsite": {
            // Creates or updates the IIS website instance.
            "Type": "Website",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "ApplicationPool": "[parameter('SiteName')]",
                "PhysicalPath": "[variable('Site.PhysicalPath')]"
            }
        },
        "StopWebsite": {
            // Stops the website if it is running.
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop"
            }
        },
        "StopAppPool": {
            // Stops the app pool if it is running.
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop"
            }
        },
        "RemoveDefaultBinding": {
            // Removes the default *:80 web binding
            "Type": "WebBinding",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "Remove": [{
                    "Port": "80",
                    "IPAddress": "*"
                }]
            }
        },
        "CreateBindingsWithThumprint": {
            // Configures the site bindings for the website.
            "Type": "WebBinding",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "Add": [{
                    "HostHeader": "[parameter('SiteName')]",
                    "Protocol": "https",
                    "SSLFlags": 1,
                    "Thumbprint": "[variable('Security.SSL.CertificateThumbprint')]"
                }]
            },
            "Skip": "[not(parameter('SSLCert'))]"
        },
        "CreateHostHeader": {
            // Sets a hostheader for the website.
            "Type": "HostHeader",
            "Params": {
                "HostName": "[parameter('SiteName')]"
            }
        },
        "SetPermissions": {
            // Sets permissions for the app pool user.
            "Type": "FilePermissions",
            "Params": {
                "Path": "[variable('Site.PhysicalPath')]",
                "Rights": [{
                    "User": "[concat('IIS AppPool\\', parameter('SiteName'))]",
                    "FileSystemRights": "FullControl",
                    "InheritanceFlags": [
                        "ContainerInherit",
                        "ObjectInherit"
                    ]
                }]
            }
        },
        "InstallWDP": {
            // Syncs the web deploy package with the website.
            "Type": "WebDeploy",
            "Params": {
                "Verb": "Sync",
                "Arguments": {
                    "Source": {
                        "Package": "[resolvepath(parameter('Package'))]"
                    },
                    "Dest": "Auto",
                    "SetParam": [{
                            "Name": "Application Path",
                            "Value": "[parameter('SiteName')]"
                        },
                        {
                            "Name": "Sitecore Admin New Password",
                            "Value": "[parameter('SitecoreAdminPassword')]"
                        },
                        {
                            "Name": "Core DB User Name",
                            "Value": "[parameter('SqlCoreUser')]"
                        },
                        {
                            "Name": "Core DB Password",
                            "Value": "[parameter('SqlCorePassword')]"
                        },
                        {
                            "Name": "Master DB User Name",
                            "Value": "[parameter('SqlMasterUser')]"
                        },
                        {
                            "Name": "Master DB Password",
                            "Value": "[parameter('SqlMasterPassword')]"
                        },
                        {
                            "Name": "Web DB User Name",
                            "Value": "[parameter('SqlWebUser')]"
                        },
                        {
                            "Name": "Web DB Password",
                            "Value": "[parameter('SqlWebPassword')]"
                        },
                        {
                            "Name": "Reporting DB User Name",
                            "Value": "[parameter('SqlReportingUser')]"
                        },
                        {
                            "Name": "Reporting DB Password",
                            "Value": "[parameter('SqlReportingPassword')]"
                        },
                        {
                            "Name": "Core Connection String",
                            "Value": "[variable('Sql.Database.Core')]"
                        },
                        {
                            "Name": "Core Admin Connection String",
                            "Value": "[variable('Sql.Database.Core')]"
                        },
                        {
                            "Name": "Master Connection String",
                            "Value": "[variable('Sql.Database.Master')]"
                        },
                        {
                            "Name": "Master Admin Connection String",
                            "Value": "[variable('Sql.Database.Master')]"
                        },
                        {
                            "Name": "Web Connection String",
                            "Value": "[variable('Sql.Database.Web')]"
                        },
                        {
                            "Name": "Web Admin Connection String",
                            "Value": "[variable('Sql.Database.Web')]"
                        },
                        {
                            "Name": "Reporting Connection String",
                            "Value": "[variable('Sql.Database.Reporting')]"
                        },
                        {
                            "Name": "Reporting Admin Connection String",
                            "Value": "[variable('Sql.Database.Reporting')]"
                        },
                        {
                            "Name": "Analytics Connection String",
                            "Value": "[variable('Mongo.Analytics')]"
                        },
                        {
                            "Name": "Tracking Live Connection String",
                            "Value": "[variable('Mongo.Tracking.Live')]"
                        },
                        {
                            "Name": "Tracking History Connection String",
                            "Value": "[variable('Mongo.Tracking.History')]"
                        },
                        {
                            "Name": "Tracking Contact Connection String",
                            "Value": "[variable('Mongo.Tracking.Contact')]"
                        },
                        {
                            "Name": "Cloud Search Connection String",
                            "Value": "[parameter('CloudSearchConnectionString')]"
                        },
                        {
                            "Name": "Application Insights Instrumentation Key",
                            "Value": "[parameter('ApplicationInsightsKey')]"
                        },
                        {
                            "Name": "Application Insights Role",
                            "Value": "[parameter('ApplicationInsightsRole')]"
                        },
                        {
                            "Name": "Telerik Encryption Key",
                            "Value": "[parameter('TelerikEncryptionKey')]"
                        },
                        {
                            "Name": "License Xml",
                            "Value": "[resolvepath(parameter('LicenseFile'))]"
                        }
                    ],
                    "Skip": [{
                        "ObjectName": "dbFullSql"
                    }]
                    // ,
                    // "EnableRule": "DoNotDelete",
                    // "UseChecksum": true
                }
            }
        },
        "RemoveDataFolderIncludeFile": {
            "Type": "DeleteFile",
            "Params": {
                "Path": "[joinpath(variable('Site.PhysicalPath'), 'App_Config\\Include\\zzDataFolder.config')]"
            }
        },        
        "ConfigureDataFolder": {
            "Type": "SetXml",
            "Params": {
                "FilePath": "[joinpath(variable('Site.PhysicalPath'), 'App_Config\\Sitecore.config')]",
                "XPath": "/sitecore/sc.variable[@name='dataFolder']",
                "Attributes": {
                    "value": "/App_Data"
                }
            }
        },
        "ConfigureTempFolder": {
            "Type": "SetXml",
            "Params": {
                "FilePath": "[joinpath(variable('Site.PhysicalPath'), 'App_Config\\Sitecore.config')]",
                "XPath": "/sitecore/sc.variable[@name='tempFolder']",
                "Attributes": {
                    "value": "/temp"
                }
            }
        },
        "ConfigureMediaCacheFolder": {
            "Type": "SetXml",
            "Params": {
                "FilePath": "[joinpath(variable('Site.PhysicalPath'), 'App_Config\\Sitecore.config')]",
                "XPath": "/sitecore/settings/setting[@name='Media.CacheFolder']",
                "Attributes": {
                    "value": "[variable('Site.MediaCacheFolder')]"
                }
            }
        }, 
        "ConfigureMediaCacheFolderCleanupAgent": {
            "Type": "SetXml",
            "Params": {
                "FilePath": "[joinpath(variable('Site.PhysicalPath'), 'App_Config\\Sitecore.config')]",
                "XPath": "/sitecore/scheduling/agent[@type='Sitecore.Tasks.CleanupAgent']/files[@hint='raw:AddCommand']/remove[@folder='d:\\local\\MediaCache']",
                "Attributes": {
                    "folder": "[variable('Site.MediaCacheFolder')]"
                }
            }
        }, 
        "ConfigureFileSubmitQueue": {
            "Type": "SetXml",
            "Params": {
                "FilePath": "[joinpath(variable('Site.PhysicalPath'), 'App_Config\\Include\\Sitecore.Analytics.Tracking.config')]",
                "XPath": "/configuration/sitecore/submitQueue/queue[@type='Sitecore.Analytics.Data.DataAccess.SubmitQueue.FileSubmitQueue, Sitecore.Analytics']/param[@desc='folderPath']",
                "Value": "$(dataFolder)/Submit Queue"
            }
        },
        "DisableAppInsightsLogging":{
            "Type":"IoXml",
            "Params":{
                "RootDirectoryPath": "[variable('Site.PhysicalPath')]",
                "IoXmlPath": "[joinpath(parameter('IoXmlDirectory'), 'DisableAppInsightsLogging.ioxml')]"
            }
        },
        "DisableDeviceDetection":{
            "Type": "DeployBootloadCargoPayloadPackage",
            "Params": {
                "TransformsFolder": "[variable('Bootload.TransformsFolder')]",
                "PackagePath":"[joinpath(parameter('CargoPayloadsDirectory'), 'Sitecore.CES.DeviceDetection.disable.sccpl')]"
            }
        },      
        "DisableGeoIp":{
            "Type": "DeployBootloadCargoPayloadPackage",
            "Params": {
                "TransformsFolder": "[variable('Bootload.TransformsFolder')]",
                "PackagePath":"[joinpath(parameter('CargoPayloadsDirectory'), 'Sitecore.CES.GeoIp.disable.sccpl')]"
            }
        },
        "Bootload": {
            "Type": "WebDeploy",
            "Params": {
                "Verb": "Sync",
                "Arguments": {
                    "Source": {
                        "Package": "[resolvepath(parameter('Package_Bootload'))]"
                    },
                    "Dest": "Auto",
                    "SetParam": [{
                            "Name": "Application Path",
                            "Value": "[parameter('SiteName')]"
                        }
                    ],
                    "EnableRule": "DoNotDelete",
                    "UseChecksum": true
                }
            }
        },
        "Powershell": {
            "Type": "WebDeploy",
            "Params": {
                "Verb": "Sync",
                "Arguments": {
                    "Source": {
                        "Package": "[resolvepath(parameter('Package_Powershell'))]"
                    },
                    "Dest": "Auto",
                    "SetParam": [{
                            "Name": "Application Path",
                            "Value": "[parameter('SiteName')]"
                        },
                        {
                            "Name": "Core Admin Connection String",
                            "Value": "[variable('Sql.Database.Core')]"
                        },
                        {
                            "Name": "Master Admin Connection String",
                            "Value": "[variable('Sql.Database.Master')]"
                        }
                    ],
                    "EnableRule": "DoNotDelete",
                    "UseChecksum": true
                }
            }
        },
        "SXA": {
            "Type": "WebDeploy",
            "Params": {
                "Verb": "sync",
                "Arguments": {
                    "Source": {
                        "Package": "[resolvepath(parameter('Package_SXA'))]"
                    },
                    "Dest": "Auto",
                    "SetParam": [{
                            "Name": "Application Path",
                            "Value": "[parameter('SiteName')]"
                        },
                        {
                            "Name": "Core Admin Connection String",
                            "Value": "[variable('Sql.Database.Core')]"
                        },
                        {
                            "Name": "Master Admin Connection String",
                            "Value": "[variable('Sql.Database.Master')]"
                        }
                    ],
                    "EnableRule": "DoNotDelete",
                    "UseChecksum": true
                }
            }
        },
        "ConfigureContentSearch": {
            "Type": "DeployBootloadCargoPayloadPackage",
            "Params": {
                "TransformsFolder": "[variable('Bootload.TransformsFolder')]",
                "PackagePath":"[joinpath(parameter('CargoPayloadsDirectory'), 'Sitecore.Lucene.ContentSearch.sccpl')]"
            }
        },
        "DisableXDbAnalytics":{
            "Type": "DeployBootloadCargoPayloadPackage",
            "Params": {
                "TransformsFolder": "[variable('Bootload.TransformsFolder')]",
                "PackagePath":"[joinpath(parameter('CargoPayloadsDirectory'), 'z.Sitecore.Lucene.Analytics.disable.sccpl')]"
            }
        }, 
        "CreateBindingsWithDevelopmentThumprint": {
            // Creates a new thumprint with a custom CA
            "Type": "AddWebFeatureSSL",
            "Params": {
                "HostName": "[parameter('SiteName')]",
                "OutputDirectory": "[variable('Site.DataFolder')]"
            },
            "Skip": "[parameter('SSLCert')]"
        },
        "SetLicense": {
            // Copies the license file to the instance data folder.
            "Type": "Copy",
            "Params": {
                "Source": "[resolvepath(parameter('LicenseFile'))]",
                "Destination": "[variable('Site.DataFolder')]"
            }
        },
        "StartAppPool": {
            // Starts the app pool.
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Start"
            }
        },
        "StartWebsite": {
            // Starts the website.
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Start"
            }
        }
    }
}